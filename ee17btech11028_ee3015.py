# -*- coding: utf-8 -*-
"""EE17BTECH11028_EE3015.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14t7oanjQyHC_NmptpPCiXOaBGMsCU0Bf
"""

import numpy as np
import matplotlib.pyplot as plt

#3.2

x=np.array([1.0,2.0,3.0,4.0,2.0,1.0])
k = 20
y = np.zeros(20)
y[0] = x[0]
y[1] = -0.5*y[0]+x[1]

for n in range(2,k-1):
	if n < 6:
		y[n] = -0.5*y[n-1]+x[n]+x[n-2]
	elif n > 5 and n < 8:
		y[n] = -0.5*y[n-1]+x[n-2]
	else:
		y[n] = -0.5*y[n-1]

#subplots
plt.subplot(2, 1, 1)
plt.stem(range(0,6),x, use_line_collection=True)
plt.title('Digital Filter Input-Output')
plt.ylabel('$x(n)$')
plt.grid()# minor

plt.subplot(2, 1, 2)
plt.stem(range(0,k),y, use_line_collection=True)
plt.xlabel('$n$')
plt.ylabel('$y(n)$')
plt.grid()# minor

print(y)

#4.5

#DTFT
def H(z):
	num = np.polyval([1,0,1],z**(-1))
	den = np.polyval([0.5,1],z**(-1))
	H = num/den
	return H
		
#Input and Output
omega = np.linspace(-3*np.pi,3*np.pi,100)

#subplots
plt.plot(omega, abs(H(np.exp(1j*omega))))
plt.title('Filter Frequency Response')
plt.xlabel('$\omega$')
plt.ylabel('$|H(e^{\jmath\omega})| $')
plt.grid()# minor

#5.2

n = np.arange(10)
fn=(-1/2)**n
hn1=np.pad(fn, (0,2), 'constant', constant_values=(0))
hn2=np.pad(fn, (2,0), 'constant', constant_values=(0))
plt.stem(np.arange(12), hn1+hn2)
plt.title('Filter Impulse Response')
plt.xlabel('$n$')
plt.ylabel('$h(n)$')
plt.grid()# minor

from matplotlib import patches

z= np.array([-1j,1j])
p= np.array([-0.5,0])

ax = plt.subplot(111)
plt.axvline(0, color='black') #Adding axes
plt.axhline(0, color='black')
plt.plot(z.real, z.imag, 'o', color='black') #Adding poles and zeros
plt.plot(p.real, p.imag, 'x', color='black')
plt.axis('scaled') #Setting x axis and y axis limits
plt.axis([-2, 2, -2, 2])

x = np.linspace(-2,2,100)      
y1 = np.sqrt(16-x**2)
y2 = -np.sqrt(16-x**2)
plt.fill_between(x, y1, y2, color='deepskyblue')

unit_circle = patches.Circle((0,0), radius=1, fill=False,color='black', ls='dashed')
ax.add_patch(unit_circle)
inner_circle = patches.Circle((0,0), radius=0.5,color='white', ls='solid')
ax.add_patch(inner_circle)
plt.text(0.1, 0.1,"z=0")
plt.text(-0.9,0.1,"z=-0.5")
plt.text(0.1,1.1,"z=1j")
plt.text(0.1,-1.2,"z=-1j")
plt.text(1,0.1,"|z|>0.5")